package handlers

import (
	"gin_test/db"
	"gin_test/models"
	"gin_test/utils"
	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api"
	"regexp"
	"strconv"
	"strings"
	"time"
)

func handleMyGames(chatID int64, strChatID string) {
	db.Redis.Del(db.Ctx, "State:"+strChatID)
	msg := tgbotapi.NewMessage(chatID, "–°–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –∏–≥—Ä")
	var keyboard tgbotapi.InlineKeyboardMarkup
	user := utils.UserCache(chatID, strChatID)
	var rows []tgbotapi.InlineKeyboardButton
	keyboard.InlineKeyboard = append(keyboard.InlineKeyboard,
		tgbotapi.NewInlineKeyboardRow(tgbotapi.NewInlineKeyboardButtonData("–î–æ–±–∞–≤–∏—Ç—å –∏–≥—Ä—É", "Add a game")))
	circle := "üî¥"
	for _, item := range user.AllLots {
		if item.Active {
			circle = "üü¢"
		}
		btn := tgbotapi.NewInlineKeyboardButtonData(item.Name+circle, item.Name)
		rows = append(rows, btn)
		if len(rows)%2 == 0 {
			keyboard.InlineKeyboard = append(keyboard.InlineKeyboard, tgbotapi.NewInlineKeyboardRow(rows...))
			rows = []tgbotapi.InlineKeyboardButton{}
		}
	}
	if len(rows) > 0 {
		keyboard.InlineKeyboard = append(keyboard.InlineKeyboard, tgbotapi.NewInlineKeyboardRow(rows...))
	}
	msg.ReplyMarkup = keyboard
	utils.SendMessage(msg)
}

func handleAddAGame(chatID int64, strChatID string) {
	user := utils.UserCache(chatID, strChatID)
	msg := tgbotapi.NewMessage(chatID, "–ú–∞–∫—Å–∏–º—É–º —Ç—ã –º–æ–∂–µ—à—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å 10 –∏–≥—Ä")
	if len(user.AllLots) <= 10 {
		msg.Text = "–ù–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞–∫ —ç—Ç–∞ –∏–≥—Ä–∞ –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—Å—å—è –≤ —Å–ø–∏—Å–∫–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –∏–≥—Ä"
		db.Redis.Set(db.Ctx, "State:"+strChatID, "–î–æ–±–∞–≤–∏—Ç—å –∏–≥—Ä—É", time.Hour)
	}
	utils.SendMessage(msg)
}

func handleAddAGameText(chatID int64, text, strChatID string) {
	re := regexp.MustCompile("^https://funpay.com/[a-z]+/[0-9]+/$")
	game := db.Redis.Get(db.Ctx, "game:"+strChatID).Val()
	servers := db.Redis.LRange(db.Ctx, "servers:"+strChatID, 0, -1).Val()
	maxPrice := db.Redis.Get(db.Ctx, "maxPrice:"+strChatID).Val()
	name := db.Redis.Get(db.Ctx, "name:"+strChatID).Val()
	switch {
	case name == "":
		msg := tgbotapi.NewMessage(chatID, "Error: –í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ—Ç 3 –¥–æ 9 —Å–∏–º–≤–æ–ª–æ–≤")
		if len(text) <= 9 && len(text) >= 3 {
			db.Redis.Set(db.Ctx, "name:"+strChatID, text, time.Hour)
			msg.Text = "–ù–∞–ø–∏—à–∏ —Å—Å—ã–ª–∫—É –Ω–∞ –∏–≥—Ä—É –∫–æ—Ç–æ—Ä—É—é —Ç—ã —Ö–æ—á–µ—à—å –æ—Å—Ç–ª–µ–∂–∏–≤–∞—Ç—å. –ü—Ä–∏–º–µ—Ä: https://funpay.com/chips/192/"
		}
		utils.SendMessage(msg)
	case game == "":
		msg := tgbotapi.NewMessage(chatID, "Error: –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞. –ü—Ä–∏–º–µ—Ä: https://funpay.com/chips/192/")
		if re.MatchString(text) {
			db.Redis.Set(db.Ctx, "game:"+strChatID, text, time.Hour)
			msg.Text = "–¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏ —Å–µ—Ä–≤–µ—Ä–∞, –∫–æ—Ç–æ—Ä—ã–µ —Ç—ã —Ö–æ—á–µ—à—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å. –ï—Å–ª–∏ –∏—Ö –Ω–µ—Ç –∏–ª–∏ —Ç—ã —Ö–æ—á–µ—à—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å" +
				" –≤—Å–µ —Å–µ—Ä–≤–µ—Ä–∞, –Ω–∞–ø–∏—à–∏ \"None\") –ü—Ä–∏–º–µ—Ä: –ì—Ä–æ–º, –ì–∞–ª–∞–∫—Ä–æ–Ω–¥, –ü–∏—Ä–∞—Ç—Å–∫–∞—è –ë—É—Ö—Ç–∞"
		}
		utils.SendMessage(msg)
	case len(servers) == 0:
		chick := strings.Split(text, ", ")
		interfaceElements := make([]interface{}, len(chick))
		for i, v := range chick {
			interfaceElements[i] = v
		}
		db.Redis.RPush(db.Ctx, "servers:"+strChatID, interfaceElements...)
		utils.SendMessage(tgbotapi.NewMessage(chatID, "–ù–∞–ø–∏—à–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å, –∫–æ—Ç–æ—Ä—É—é —Ç—ã "+
			"—Ö–æ—á–µ—à—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å. –ü—Ä–∏–º–µ—Ä: 3.5"))
	case maxPrice == "":
		msg := tgbotapi.NewMessage(chatID, "Error: –í–≤–µ–¥–∏ —á–∏—Å–ª–æ. –ü—Ä–∏–º–µ—Ä: 3.5")
		maxPriceFloat, err := strconv.ParseFloat(text, 64)
		if err == nil {
			msg.Text = "–ò–≥—Ä–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞."
			utils.SendMessage(msg)
			if strings.ToLower(servers[0]) == "none" {
				servers = []string{}
			}
			user := utils.UserCache(chatID, strChatID)
			newLot := models.AllLots{
				UserID:   user.ID,
				Lot:      game,
				Name:     name,
				Servers:  servers,
				MaxPrice: maxPriceFloat,
			}
			go func(user *models.User, newLot models.AllLots, strChatID string) {
				db.Db.Create(&newLot)
				user.AllLots = append(user.AllLots, newLot)
				db.Redis.Set(db.Ctx, "UserData:"+strChatID, utils.EncodeUserData(user), time.Hour)
				db.Redis.Del(db.Ctx, "maxPrice:"+strChatID, "game:"+strChatID, "servers:"+strChatID,
					"State:"+strChatID, "name:"+strChatID)
			}(user, newLot, strChatID)
		}
	}
}
